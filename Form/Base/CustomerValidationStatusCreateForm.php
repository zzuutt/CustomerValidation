<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace CustomerValidation\Form\Base;

use CustomerValidation\CustomerValidation;
use Thelia\Form\BaseForm;
use Symfony\Component\Validator\Constraints\NotBlank;

/**
 * Class CustomerValidationStatusCreateForm
 * @package CustomerValidation\Form\Base
 * @author TheliaStudio
 */
class CustomerValidationStatusCreateForm extends BaseForm
{
    const FORM_NAME = "customer_validation_status_create";

    public function buildForm()
    {
        $translationKeys = $this->getTranslationKeys();
        $fieldsIdKeys = $this->getFieldsIdKeys();

        $this->addCodeField($translationKeys, $fieldsIdKeys);
        $this->addTitleField($translationKeys, $fieldsIdKeys);
        $this->addDescriptionField($translationKeys, $fieldsIdKeys);
        $this->addChapoField($translationKeys, $fieldsIdKeys);
        $this->addPostscriptumField($translationKeys, $fieldsIdKeys);
        $this->addLocaleField();
    }

    public function addLocaleField()
    {
        $this->formBuilder->add(
            'locale',
            'hidden',
            [
                'constraints' => [ new NotBlank() ],
                'required'    => true,
            ]
        );
    }

    protected function addCodeField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("code", "text", array(
            "label" => $this->translator->trans($this->readKey("code", $translationKeys), [], CustomerValidation::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("code", $fieldsIdKeys)],
            "required" => true,
            "constraints" => array(
                new NotBlank(),
            ),
            "attr" => array(
            )
        ));
    }

    protected function addTitleField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("title", "text", array(
            "label" => $this->translator->trans($this->readKey("title", $translationKeys), [], CustomerValidation::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("title", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addDescriptionField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("description", "textarea", array(
            "label" => $this->translator->trans($this->readKey("description", $translationKeys), [], CustomerValidation::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("description", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addChapoField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("chapo", "textarea", array(
            "label" => $this->translator->trans($this->readKey("chapo", $translationKeys), [], CustomerValidation::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("chapo", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addPostscriptumField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("postscriptum", "textarea", array(
            "label" => $this->translator->trans($this->readKey("postscriptum", $translationKeys), [], CustomerValidation::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("postscriptum", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    public function getName()
    {
        return static::FORM_NAME;
    }

    public function readKey($key, array $keys, $default = '')
    {
        if (isset($keys[$key])) {
            return $keys[$key];
        }

        return $default;
    }

    public function getTranslationKeys()
    {
        return array();
    }

    public function getFieldsIdKeys()
    {
        return array(
            "code" => "customer_validation_status_code",
            "title" => "customer_validation_status_title",
            "description" => "customer_validation_status_description",
            "chapo" => "customer_validation_status_chapo",
            "postscriptum" => "customer_validation_status_postscriptum",
        );
    }
}
